logd.root=debug,console

# %n, %N: 输出一个回车字符
# %m, %M: 输出消息内容（也包括异常栈信息）
# %e, %E: 输出错误异常栈信息
# %d, %D: 输出日期格式信息，例如 "%d{yyyy-MM-dd HH:mm:ss}"
# %c:     输出命名空间或者tags.我们可以使用%c{层数}来输出命名空间中指定的信息
#         例如%c{1}，如果命名空间是 darks.log.DemoMain，那么它会输出DemoMain
# %C:     输出类名.你也可以使用%C{层数}的方式来输出类名的指定层数
#         例如%C{2}，如果类全名是darks.log.DemoMain，那么它会输出log.DemoMain
# %f, %F: 输出源文件名称
# %L:     输出源代码行数
# %l:     输出时间信息，包括调用类，线程名，源文件名以及代码行数
# %p, %P: 输出日志级别
# %r, %R: 输出从启动到现在的消耗时间
# %t, %T: 输出当前线程名

# Appender是所有消息处理器的基类，它可以配置layout、filter等等，你可以通过继承该类去自定义化输出，比如将日志输出到Android的UI上
# layout主要用来格式化消息，你可以使用自带的darks.log.PatternLayout，darks.log.SimpleLayout等layout，你甚至可以继承LoggerLayout自定义实现layout
# PatternLayout能够灵活的通过输出格式输出日志信息，例如%d{yyyy-MM-dd HH:mm:ss} %c{1} - %m%n
# SimpleLayout能够输出较为简单的日志类型。例如：level - message
# filter能够通过指定的规则过滤日志消息
# LevelRangeFilter能够输出最小等级与最大等级之间的日志消息
# RegexMatchFilter能够输出匹配指定的正则表达式的日志消息
# LevelMatchFilter能够输出制定日志等级的消息日志。多个等级之间用逗号隔开
# ConsoleAppender能够输出日志消息到命令控制台
# AndroidAppender能够输出消息到Android的logcat
# StreamAppender是流式输出的基础类。你不能直接的使用它，而是必须创建一个继承于它的类去实现流式的输出。你能够使用它将消息输出到文件、网络等地方
# SocketAppender能够通过TCP协议输出日志消息到服务端，它继承于StreamAppender
# FileAppender能够输出日志消息到文件。它继承于StreamAppender。如果你想创建动态的文件名，你可以使用${PROPERTY_VARIABLE}获得System.getProperty的值。如果你想获得Android的SDCARD目录，你可以通过${sdcard}去获得sdcard的绝对路径。如果你想在文件名上加上日期或者时间，你可以使用${D[日期格式]}，例如${Dyyyy_MM_dd_HH_mm_ss}
# FileDateSizeAppender能够保证日志文件在指定的大小及日期范围内。它的日志文件默认保留时间为7天，它的默认保留大小为10MB，如果超出指定大小将新建一个日志文件。它的相关属性继承于FileAppender
# StorgeAppender能够输出日志消息到数据库中，它与StreamAppender一样不能直接使用，而是通过创建继承于它的功能实现类。它能将消息输出到mysql、sqlite、oracle等数据库中
# SqliteAppender能够输出日志消息到Android的sqlite数据库中。它继承于StorgeAppender
# 你可以使用logd.logger.[命名空间]的方式单独为每个命名空间指定logger
# 指定包的子logger设置可以将消息输出到指定的日志处理器中，但同时也会输出到root的日志处理器中。为了避免日志被输出两次，你可以使用inherit关闭指定命名空间或者整体都不输出到root的logger中

logd.appender.console=ConsoleAppender
logd.appender.console.layout=PatternLayout
logd.appender.console.layout.pattern=[%C{3}(%F:%L)#%T] %m%n

# logd.appender.ANDROID=AndroidAppender
# 输出命名空间的指定层数作为logcat的TAG。默认为1
# logd.appender.ANDROID.layer=1
# logd.appender.ANDROID.layout=PatternLayout
# logd.appender.ANDROID.layout.pattern=[%f][%l][%T] - %m%n

# 设置了async的日志处理器能够异步的将日志消息输出到日志处理器中
# logd.appender.console.async=true

# logd.appender.console.filter=LevelRangeFilter
# logd.appender.console.filter=RegexMatchFilter
# logd.appender.console.filter.pattern=darks\d+
# logd.appender.console.filter=LevelMatchFilter
# logd.appender.console.filter.levels=debug,info
# logd.appender.console.filter.levelMin=debug
# logd.appender.console.filter.levelMax=info
# logd.appender.console.filter.accept=false

logd.appender.FILE=FileDateSizeAppender
logd.appender.FILE.layout=PatternLayout
logd.appender.FILE.layout.pattern=%d{yyyy-MM-dd HH:mm:ss} %c{1} - %m%n
logd.appender.FILE.fileName=${sdcard}/logs/log_${Dyyyy_MM_dd}.txt
logd.appender.FILE.buffered=false
logd.appender.FILE.immediateFlush=false
logd.appender.FILE.maxSize=1024
logd.appender.FILE.keepDay=7

# logd.appender.SOCKET=SocketAppender
# logd.appender.SOCKET.layout=PatternLayout
# logd.appender.SOCKET.layout.pattern=%d{yyyy-MM-dd HH:mm:ss} %c{1} - %m%n
# 服务端IP
# logd.appender.SOCKET.serverHost=127.0.0.1
# 服务端端口
# logd.appender.SOCKET.serverPort=8686
# 保持alive
# logd.appender.SOCKET.keepAlive=true
# logd.appender.SOCKET.tcpNoDelay=true
# 用头字节封装消息，它会给传输的日志消息加上前置标识以及消息长度。
# logd.appender.SOCKET.wrapBytes=true

# logd.appender.SQLITE=SqliteAppender
# logd.appender.SQLITE.layout=PatternLayout
# 指定数据库名称
# logd.appender.SQLITE.dbName=db_records
# 指定版本号
# logd.appender.SQLITE.dbVersion=1
# 指定表名
# logd.appender.SQLITE.table=t_logs
# 创建表的语句
# logd.appender.SQLITE.createSQL=create table if not exists t_logs(_id integer primary key autoincrement,date text,level text,source integer,file text,message text)
# 数据库列映射
# logd.appender.SQLITE.columnsMap.date=%d{yyyy-MM-dd HH:mm:ss}
# logd.appender.SQLITE.columnsMap.level=%p
# logd.appender.SQLITE.columnsMap.source=%L
# logd.appender.SQLITE.columnsMap.file=%f
# logd.appender.SQLITE.columnsMap.message=%m

# 设置darks.log.test包中的日志输出为debug级
# logd.logger.darks.log.test=debug
# 设置darks.log.test.file包中的日志输出为debug级，并且输出到名为FILE的消息处理器中
# logd.logger.darks.log.test.file=debug,FILE
# 设置darks.log包中的日志输出为debug级，并且输出到名为console的消息处理器中
# logd.logger.darks.log=debug,console

# logd.additivity = false
# logd.inherit = false
# logd.inherit.darks.logs.test = true